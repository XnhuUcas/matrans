# train data
for (i in 1:num.source) {
for (j in 1:qz[i]) {
dataz[[i]] <- cbind(dataz[[i]], as.matrix(runif(size[i], 0, 1)))
}
fun.name <- get(paste("smooth.fun.true", i, sep = ""))
gz[[i]] <- as.matrix(fun.name(dataz[[i]]))
}
beta.true[[1]] <- para.mis.tar
xmat <- rho^abs(outer(1:pnew, 1:pnew, "-"))
datax[[1]] <- mvrnorm(size[1], rep(0, pnew), xmat)
if (if.heter) {
err <- c()
for (ii in 1:size[1]) {
err[ii] <- rnorm(1, 0, err.sigma * (datax[[1]][ii, 1])^2)
}
} else {
err <- rnorm(size[1], 0, err.sigma)
}
respon[[1]] <- datax[[1]] %*% beta.true[[1]] + gz[[1]] + err
for (k in 2:num.source) {
if (k == 2) {
beta.true[[k]] <- para.mis.src
xmat <- rho^abs(outer(1:pnew, 1:pnew, "-"))
datax[[k]] <- mvrnorm(size[k], rep(0, pnew), xmat)
if (if.heter) {
err <- c()
for (ii in 1:size[k]) {
err[ii] <- rnorm(1, 0, err.sigma * (datax[[k]][ii, 1])^2)
}
} else {
err <- rnorm(size[k], 0, err.sigma)
}
respon[[k]] <- datax[[k]] %*% beta.true[[k]] + gz[[k]] + err
} else {
beta.true[[k]] <- coeff0[, k]
xmat <- rho^abs(outer(1:px, 1:px, "-"))
datax[[k]] <- mvrnorm(size[k], rep(0, px), xmat)
if (if.heter) {
err <- c()
for (ii in 1:size[k]) {
err[ii] <- rnorm(1, 0, err.sigma * (datax[[k]][ii, 1])^2)
}
} else {
err <- rnorm(size[k], 0, err.sigma)
}
respon[[k]] <- datax[[k]] %*% beta.true[[k]] + gz[[k]] + err
}
}
data.train <- list(data.y = respon, beta.true = beta.true, data.x = datax, data.z = dataz, gz = gz)
# test data
beta.true.te <- para.mis.tar
xmat.te <- rho^abs(outer(1:pnew, 1:pnew, "-"))
datax.te <- mvrnorm(size.test, rep(0, pnew), xmat.te)
if (if.heter) {
err.te <- c()
for (ii in 1:size.test) {
err.te[ii] <- rnorm(1, 0, err.sigma * (datax.te[ii, 1])^2)
}
} else {
err.te <- rnorm(size.test, 0, err.sigma)
}
dataz.te <- NULL
for (j in 1:qz[1]) {
dataz.te <- cbind(dataz.te, as.matrix(runif(size.test, 0, 1)))
}
gz.te <- as.matrix(smooth.fun.true1(dataz.te))
respon.te <- datax.te %*% beta.true.te + gz.te + err.te
data.test <- list(data.y = respon.te, data.x = datax.te, data.z = dataz.te, gz.te = gz.te, beta.true = beta.true.te)
}
return(list(data.train = data.train, data.test = data.test))
}
#' whole.data <- simdata.gen(px = 6, num.source = 4, size = c(150, 200, 200, 150), coeff0 = coeff0, coeff.mis = coeff.mis, err.sigma = 0.5, rho = 0.5, size.test = 500, sim.set = "homo", tar.spec = "mis", if.heter = FALSE)
#' data.train <- whole.data$data.train
#' data.test <- whole.data$data.test
#'
#' # running Trans-SMAP and obtain the optimal weight vector
#' data.train$data.x[[1]] <- data.train$data.x[[1]][, -7]
#' data.train$data.x[[2]] <- data.train$data.x[[2]][, -7]
#' fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
#' ma.weights <- fit.transsmap$weight.est
#' }
trans.smap <- function(train.data, nfold = NULL, bs.para) {
s.cnt <- length(train.data$data.y)
p <- ncol(train.data$data.x[[1]])
size.train <- sapply(train.data$data.x, function(x) nrow(x))
bs.df <- bs.para$bs.df
bs.degree <- bs.para$bs.degree
xstring <- paste(paste("x", 1:p, sep = ""), collapse = "+")
reg.res <- vector(mode = "list", length = s.cnt)
for (k in 1:s.cnt) {
data.merge <- cbind(train.data$data.y[[k]], train.data$data.x[[k]], train.data$data.z[[k]])
data.train.frame <- as.data.frame(data.merge)
colnames(data.train.frame) <- c("respon", paste("x", 1:p, sep = ""), paste("z", 1:ncol(train.data$data.z[[k]]), sep = ""))
# zstring <- paste(paste(paste('bs(',paste('z',1:ncol(train.data$data.z[[k]]),sep = ''),sep = ''),')',sep=''), collapse="+")
zstring <- paste(paste(paste("bs(", paste(paste("z", 1:ncol(train.data$data.z[[k]]), sep = ""),
paste("df = bs.df[", 1:ncol(train.data$data.z[[k]]), "]", sep = ""),
paste("degree = bs.degree[", 1:ncol(train.data$data.z[[k]]), "]", sep = ""),
sep = ","
), sep = ""), ")", sep = ""), collapse = "+")
reg.res[[k]] <- lm(as.formula(paste("respon~", paste(xstring, zstring, sep = "+"), sep = "")), data = data.train.frame)
}
## jackknife
if (is.null(nfold)) {
timestart <- Sys.time()
proj.mat <- matrix(0, s.cnt, s.cnt)
for (i in 1:size.train[1]) {
train.data.cv <- train.data
est.beta <- matrix(NA, nrow = s.cnt, ncol = p)
lm.tr <- vector(mode = "list", length = s.cnt)
for (j in 1:s.cnt) {
if (j == 1) {
data.merge.cv <- cbind(train.data$data.y[[j]], train.data$data.x[[j]], train.data$data.z[[j]])
data.merge.cv <- data.merge.cv[-i, ]
} else {
data.merge.cv <- cbind(train.data$data.y[[j]], train.data$data.x[[j]], train.data$data.z[[j]])
}
qz <- ncol(train.data.cv$data.z[[j]])
datalm <- as.data.frame(data.merge.cv)
colnames(datalm) <- c("respon", paste("x", 1:p, sep = ""), paste("z", 1:qz, sep = ""))
xstring <- paste(paste("x", 1:p, sep = ""), collapse = "+")
# zstring <- paste(paste(paste('bs(',paste('z',1:qz,sep = ''),sep = ''),')',sep=''), collapse="+")
zstring <- paste(paste(paste("bs(", paste(paste("z", 1:qz, sep = ""),
paste("df = bs.df[", 1:qz, "]", sep = ""),
paste("degree = bs.degree[", 1:qz, "]", sep = ""),
sep = ","
), sep = ""), ")", sep = ""), collapse = "+")
lm.tr[[j]] <- lm(as.formula(paste("respon~", paste(xstring, zstring, sep = "+"), sep = "")), data = datalm)$coefficients
est.beta[j, ] <- lm.tr[[j]][2:(p + 1)]
}
beta.est.train.mat <- NULL
for (j in 1:s.cnt) {
beta.est.train.mat <- cbind(beta.est.train.mat, as.matrix(c(lm.tr[[1]][1], est.beta[j, ], lm.tr[[1]][(p + 2):length(lm.tr[[1]])])))
}
q <- ncol(train.data$data.z[[1]])
bsz.tar <- NULL
for (j in 1:q) {
bsz.tar <- cbind(bsz.tar, bs(train.data$data.z[[1]][, j]))
}
data.merge.new <- cbind(train.data$data.x[[1]], bsz.tar)
pred.y <- t(c(1, data.merge.new[i, ]) %*% beta.est.train.mat)
proj.mat <- proj.mat + (pred.y - train.data$data.y[[1]][i] * matrix(1, s.cnt, 1)) %*% t(pred.y - train.data$data.y[[1]][i] * matrix(1, s.cnt, 1))
}
Dmat <- proj.mat / size.train[1]
d <- rep(0, s.cnt)
Amat <- t(rbind(matrix(1, nrow = 1, ncol = s.cnt), diag(s.cnt), -diag(s.cnt)))
bvec <- rbind(1, matrix(0, nrow = s.cnt, ncol = 1), matrix(-1, nrow = s.cnt, ncol = 1))
solve.qr <- try(
{
solve.QP(Dmat, d, Amat, bvec, meq = 1)
},
silent = TRUE
)
time.transsmap <- as.double(difftime(Sys.time(), timestart, units = "secs"))
if ("try-error" %in% class(solve.qr)) {
return(list(weight.est = NA, time.transsmap = time.transsmap, reg.res = reg.res))
} else {
return(list(weight.est = solve.qr$solution, time.transsmap = time.transsmap, reg.res = reg.res))
}
}
## k-fold
else {
timestart <- Sys.time()
proj.mat <- matrix(0, s.cnt, s.cnt)
split <- createFolds(train.data$data.y[[1]], k = nfold)
for (i in 1:nfold) {
train.data.cv <- train.data
est.beta <- matrix(NA, nrow = s.cnt, ncol = p)
lm.tr <- vector(mode = "list", length = s.cnt)
for (j in 1:s.cnt) {
if (j == 1) {
data.merge.cv <- cbind(train.data$data.y[[j]], train.data$data.x[[j]], train.data$data.z[[j]])
data.merge.cv <- data.merge.cv[-split[[i]], ]
} else {
data.merge.cv <- cbind(train.data$data.y[[j]], train.data$data.x[[j]], train.data$data.z[[j]])
}
qz <- ncol(train.data.cv$data.z[[j]])
datalm <- as.data.frame(data.merge.cv)
colnames(datalm) <- c("respon", paste("x", 1:p, sep = ""), paste("z", 1:qz, sep = ""))
xstring <- paste(paste("x", 1:p, sep = ""), collapse = "+")
# zstring <- paste(paste(paste('bs(',paste('z',1:qz,sep = ''),sep = ''),')',sep=''), collapse="+")
zstring <- paste(paste(paste("bs(", paste(paste("z", 1:qz, sep = ""),
paste("df = bs.df[", 1:qz, "]", sep = ""),
paste("degree = bs.degree[", 1:qz, "]", sep = ""),
sep = ","
), sep = ""), ")", sep = ""), collapse = "+")
lm.tr[[j]] <- lm(as.formula(paste("respon~", paste(xstring, zstring, sep = "+"), sep = "")), data = datalm)$coefficients
est.beta[j, ] <- lm.tr[[j]][2:(p + 1)]
}
beta.est.train.mat <- NULL
for (j in 1:s.cnt) {
beta.est.train.mat <- cbind(beta.est.train.mat, as.matrix(c(lm.tr[[1]][1], est.beta[j, ], lm.tr[[1]][(p + 2):length(lm.tr[[1]])])))
}
q <- ncol(train.data$data.z[[1]])
bsz.tar <- NULL
for (j in 1:q) {
bsz.tar <- cbind(bsz.tar, bs(train.data$data.z[[1]][, j]))
}
data.merge.new <- cbind(as.matrix(rep(1, size.train[1])), train.data$data.x[[1]], bsz.tar)
pred.y <- data.merge.new[split[[i]], ] %*% beta.est.train.mat
err.fold <- t(pred.y - train.data$data.y[[1]][split[[i]], ] %*% matrix(1, 1, s.cnt)) %*% (pred.y - train.data$data.y[[1]][split[[i]], ] %*% matrix(1, 1, s.cnt))
proj.mat <- proj.mat + err.fold
}
Dmat <- proj.mat / size.train[1]
d <- rep(0, s.cnt)
Amat <- t(rbind(matrix(1, nrow = 1, ncol = s.cnt), diag(s.cnt), -diag(s.cnt)))
bvec <- rbind(1, matrix(0, nrow = s.cnt, ncol = 1), matrix(-1, nrow = s.cnt, ncol = 1))
solve.qr <- try(
{
solve.QP(Dmat, d, Amat, bvec, meq = 1)
},
silent = TRUE
)
time.transsmap <- as.double(difftime(Sys.time(), timestart, units = "secs"))
if ("try-error" %in% class(solve.qr)) {
return(list(weight.est = NA, time.transsmap = time.transsmap, reg.res = reg.res))
} else {
return(list(weight.est = solve.qr$solution, time.transsmap = time.transsmap, reg.res = reg.res))
}
}
}
#' fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
#' ma.weights <- fit.transsmap$weight.est
#'
#' # predict for new data
#' data.test.mis <- data.test
#' data.test.mis$data.x <- data.test.mis$data.x[, -7]
#' pred.res <- predict.transsmap(object = fit.transsmap, newdata = data.test.mis, bs.para = bs.para)
#' pred.val <- pred.res$predict.val
#' predict.risk <- sum((pred.val - data.test$data.x %*% data.test$beta.true - data.test$gz.te)^2) / size.test
#' }
predict.transsmap <- function(object, newdata, bs.para) {
q <- ncol(newdata$data.z)
p <- ncol(newdata$data.x)
size.test <- nrow(newdata$data.x)
bs.df <- bs.para$bs.df
bs.degree <- bs.para$bs.degree
reg.res <- object$reg.res
ma.weights <- object$weight.est
bsz.tar <- NULL
for (j in 1:q) {
bsz.tar <- cbind(bsz.tar, bs(newdata$data.z[, j], df = bs.df[j], degree = bs.degree[j]))
}
beta.est.train.mat <- matrix(NA, p, length(reg.res))
for (k in 1:length(reg.res)) {
beta.est.train.mat[, k] <- reg.res[[k]]$coefficients[2:(p + 1)]
}
beta.ma <- beta.est.train.mat %*% as.matrix(ma.weights)
nonpara.est <- bsz.tar %*% reg.res[[1]]$coefficients[(p + 2):length(reg.res[[1]]$coefficients)]
if (all(is.na(ma.weights))) {
return(list(predict.val = NA, beta.ma = NA))
} else {
predict.val <- (newdata$data.x %*% beta.est.train.mat + matrix(rep(reg.res[[1]]$coefficients[1] + nonpara.est, length(reg.res)), size.test, length(reg.res))) %*% as.matrix(ma.weights)
return(list(
predict.val = predict.val,
beta.ma = beta.ma
))
}
}
whole.data <- simdata.gen(px = 6, num.source = 4, size = c(150, 200, 200, 150), coeff0 = coeff0, coeff.mis = as.matrix(c(coeff0[, 2], 1.8)), err.sigma = 0.5, rho = 0.5, size.test = 500, sim.set = "homo", tar.spec = "cor", if.heter = FALSE)
data.train <- whole.data$data.train
data.test <- whole.data$data.test
# running Trans-SMAP and obtain the optimal weight vector
data.train$data.x[[2]] <- data.train$data.x[[2]][, -7]
fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
ma.weights <- fit.transsmap$weight.est
# predict for new data
pred.res <- predict.transsmap(object = fit.transsmap, newdata = data.test, bs.para = bs.para)
pred.val <- pred.res$predict.val
predict.risk <- sum((pred.val - data.test$data.x %*% data.test$beta.true - data.test$gz.te)^2) / size.test
size.test
pred.val <- pred.res$predict.val
predict.risk <- sum((pred.val - data.test$data.x %*% data.test$beta.true - data.test$gz.te)^2) / 500
# generate simulation dataset
coeff.mis <- matrix(c(c(coeff0[, 1], 0.1), c(coeff0[, 2], 1.8)), ncol = 2)
whole.data <- simdata.gen(px = 6, num.source = 4, size = c(150, 200, 200, 150), coeff0 = coeff0, coeff.mis = coeff.mis, err.sigma = 0.5, rho = 0.5, size.test = 500, sim.set = "homo", tar.spec = "mis", if.heter = FALSE)
data.train <- whole.data$data.train
data.test <- whole.data$data.test
# running Trans-SMAP and obtain the optimal weight vector
data.train$data.x[[1]] <- data.train$data.x[[1]][, -7]
data.train$data.x[[2]] <- data.train$data.x[[2]][, -7]
fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
ma.weights <- fit.transsmap$weight.est
# predict for new data
data.test.mis <- data.test
data.test.mis$data.x <- data.test.mis$data.x[, -7]
pred.res <- predict.transsmap(object = fit.transsmap, newdata = data.test.mis, bs.para = bs.para)
pred.val <- pred.res$predict.val
predict.risk <- sum((pred.val - data.test$data.x %*% data.test$beta.true - data.test$gz.te)^2) / size.test
predict.risk <- sum((pred.val - data.test$data.x %*% data.test$beta.true - data.test$gz.te)^2) / 500
devtools::document()
devtools::document()
devtools::document()
styler::style_pkg()
library(matrans)
devtools::check()
?predict.glmtrans
?glmtrans
devtools::document()
styler::style_pkg()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(matrans)
library(matrans)
install.packages(matrans)
install.packages("matrans")
install.packages("matrans")
detach("package:matrans", unload = TRUE)
remove.packages("matrans")
install.packages("matrans")
install.packages(matrans)
library("devtools")
devtools::install_github("XnhuUcas/matrans")
library(matrans)
# generate simulation dataset
coeff0 <- cbind(
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3) + 0.02),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3) + 0.3),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3))
)
whole.data <- simdata.gen(px = 6, num.source = 4, size = c(150, 200, 200, 150), coeff0 = coeff0, coeff.mis = as.matrix(c(coeff0[, 2], 1.8)), err.sigma = 0.5, rho = 0.5, size.test = 500, sim.set = "homo", tar.spec = "cor", if.heter = FALSE)
data.train <- whole.data$data.train
data.test <- whole.data$data.test
# running Trans-SMAP and obtain the optimal weight vector
data.train$data.x[[2]] <- data.train$data.x[[2]][, -7]
fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
ma.weights <- fit.transsmap$weight.est
# predict for new data
pred.res <- predict.transsmap(object = fit.transsmap, newdata = data.test, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
pred.val <- pred.res$predict.val
# predict for new data
pred.res <- predict.transsmap(object = fit.transsmap, newdata = data.test, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
ma.weights
library(matrans)
?sim
?simdata.gen
library(matrans)
?simdata.gen
# generate simulation dataset
coeff0 <- cbind(
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3) + 0.02),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3) + 0.3),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3))
)
whole.data <- simdata.gen(px = 6, num.source = 4, size = c(150, 200, 200, 150), coeff0 = coeff0, coeff.mis = as.matrix(c(coeff0[, 2], 1.8)), err.sigma = 0.5, rho = 0.5, size.test = 500, sim.set = "homo", tar.spec = "cor", if.heter = FALSE)
data.train <- whole.data$data.train
data.test <- whole.data$data.test
# running Trans-SMAP and obtain the optimal weight vector
data.train$data.x[[2]] <- data.train$data.x[[2]][, -7]
fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
ma.weights <- fit.transsmap$weight.est
# predict for new data
pred.res <- predict.transsmap(object = fit.transsmap, newdata = data.test, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
?predict.transsmap
# predict for new data
pred.res <- predict(object = fit.transsmap, newdata = data.test, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
?predict.glmtrans
devtools::document()
devtools::check()
devtools::document()
styler::style_pkg()
devtools::check()
library(matrans)
# generate simulation dataset
coeff0 <- cbind(
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3) + 0.02),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3) + 0.3),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3))
)
whole.data <- simdata.gen(px = 6, num.source = 4, size = c(150, 200, 200, 150), coeff0 = coeff0, coeff.mis = as.matrix(c(coeff0[, 2], 1.8)), err.sigma = 0.5, rho = 0.5, size.test = 500, sim.set = "homo", tar.spec = "cor", if.heter = FALSE)
data.train <- whole.data$data.train
data.test <- whole.data$data.test
# running Trans-SMAP and obtain the optimal weight vector
data.train$data.x[[2]] <- data.train$data.x[[2]][, -7]
fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
ma.weights <- fit.transsmap$weight.est
# predict for new data
pred.res <- pred.transsmap(object = fit.transsmap, newdata = data.test, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
pred.val <- pred.res$predict.val
predict.risk <- sum((pred.val - data.test$data.x %*% data.test$beta.true - data.test$gz.te)^2) / 500
# generate simulation dataset
coeff.mis <- matrix(c(c(coeff0[, 1], 0.1), c(coeff0[, 2], 1.8)), ncol = 2)
whole.data <- simdata.gen(px = 6, num.source = 4, size = c(150, 200, 200, 150), coeff0 = coeff0, coeff.mis = coeff.mis, err.sigma = 0.5, rho = 0.5, size.test = 500, sim.set = "homo", tar.spec = "mis", if.heter = FALSE)
data.train <- whole.data$data.train
data.test <- whole.data$data.test
# running Trans-SMAP and obtain the optimal weight vector
data.train$data.x[[1]] <- data.train$data.x[[1]][, -7]
data.train$data.x[[2]] <- data.train$data.x[[2]][, -7]
fit.transsmap <- trans.smap(train.data = data.train, nfold = 5, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
ma.weights <- fit.transsmap$weight.est
# predict for new data
data.test.mis <- data.test
data.test.mis$data.x <- data.test.mis$data.x[, -7]
pred.res <- predict.transsmap(object = fit.transsmap, newdata = data.test.mis, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
pred.res <- pred.transsmap(object = fit.transsmap, newdata = data.test.mis, bs.para = list(bs.df = rep(3, 3), bs.degree = rep(3, 3)))
pred.val <- pred.res$predict.val
predict.risk <- sum((pred.val - data.test$data.x %*% data.test$beta.true - data.test$gz.te)^2) / 500
getwd()
remove.packages("matrans")
library(matrans)
getwd()
setwd('/Users/huxiaonan/Desktop/')
getwd()
usethis::use_gpl3_license()
usethis::use_data_raw()
library(matrans)
## code to prepare `DATASET` dataset goes here
library(matrans)
## generate simulation datasets (M=7)
coeff0 <- cbind(as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)),
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)+0.02),#  mis
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)+0.02), #light diff
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)+0.3),#  hard diff
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)),# same
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)+0.02),# light diff
as.matrix(c(1.4, -1.2, 1, -0.8, 0.65, 0.3)+0.3)) # hard diff
## correct target model setting
whole.data.cor <- simdata.gen(
px = 6, num.source = 7, size = c(150,200,150,200,150,150,200), coeff0 = coeff0,
coeff.mis = as.matrix(c(coeff0[, 2], 1.8)), err.sigma = 0.5, rho = 0.5, size.test = 500,
sim.set = "homo", tar.spec = "cor", if.heter = FALSE
)
## misspecified target model setting
coeff.mis <- matrix(c(c(coeff0[, 1], 0.1), c(coeff0[, 2], 1.8)), ncol = 2)
whole.data.mis <- simdata.gen(
px = 6, num.source = 7, size = c(150,200,150,200,150,150,200), coeff0 = coeff0,
coeff.mis = coeff.mis, err.sigma = 0.5, rho = 0.5, size.test = 500,
sim.set = "homo", tar.spec = "mis", if.heter = FALSE
)
example.data <- list(data.cor=whole.data.cor, data.mis=whole.data.mis)
usethis::use_data(example.data, overwrite = TRUE)
usethis::use_version()
library(matrans)
devtools::use_vignette("matrans-tutorial")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/devtools/devtools_2.0.2.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
devtools::use_vignette("matrans-tutorial")
install.packages("~/Downloads/devtools_2.0.2.tar.gz", repos = NULL, type = "source")
install.packages(packageurl, repos=NULL, type="binary")
devtools::use_vignette("matrans-tutorial")
devtools::document()
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::document()
devtools::use_vignette("matrans-tutorial")
usethis::use_vignette("matrans-vignette")
a=c(1,3,4,5)
1%in%a
3%in%a
2%in%a
1%notin%a
1%noin%a
devtools::document()
styler::style_pkg()
devtools::check()
library(matrans)
update.packages(ask = FALSE, checkBuilt = TRUE)
devtools::document()
styler::style_pkg()
devtools::check()
rmarkdown::render("Introduction_to_JTZ.Rmd")
rmarkdown::render("matrans-vignette.Rmd")
rmarkdown::render("matrans-vignette.Rmd")
getwd()
getwd()
setwd("/Users/huxiaonan/Desktop/Rpackage/matrans/vignettes/")
getwd()
rmarkdown::render("matrans-vignette.Rmd")
?
formatR
??formatR
usethis::use_package(package = "formatR", type = "Imports")
devtools::check()
devtools::check()
devtools::document()
devtools::document()
styler::style_pkg()
devtools::check()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
update.packages(ask = FALSE, checkBuilt = TRUE)
devtools::check()
devtools::check(build_args = c('--resave-data','--compact-vignettes="gs+qpdf"'))
?too;s
?tools
tools::compactPDF(gs_quality = "ebook")
?compactPDF
getwd()
tools::compactPDF(path = "/Users/huxiaonan/Desktop/Rpackage/matrans/vignettes/", gs_quality = "ebook")
devtools::check()
R CMD build --hel
R CMD build --help
devtools::check()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::check()
devtools::document()
styler::style_pkg()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
library(matrans)
devtools::document()
styler::style_pkg()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::document()
styler::style_pkg()
library(matrans)
